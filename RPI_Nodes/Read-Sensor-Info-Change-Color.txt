[{"id":"c313cdd0.be2ec8","type":"tab","label":"Hue Sensor","disabled":false,"info":""},{"id":"25c369e6.35f626","type":"ibmiot in","z":"c313cdd0.be2ec8","authentication":"apiKey","apiKey":"5c13f417.02dc7c","inputType":"evt","logicalInterface":"","ruleId":"","deviceId":"","applicationId":"","deviceType":"+","eventType":"Sensor1","commandType":"","format":"json","name":"Sensor","service":"registered","allDevices":true,"allApplications":"","allDeviceTypes":true,"allLogicalInterfaces":"","allEvents":true,"allCommands":"","allFormats":true,"qos":0,"x":110,"y":140,"wires":[["d2e2e098.4afca","fa50b1b4.6a396"]]},{"id":"fa50b1b4.6a396","type":"switch","z":"c313cdd0.be2ec8","name":"Comprobamos","property":"payload.d.Temp","propertyType":"msg","rules":[{"t":"btwn","v":"24.5","vt":"num","v2":"25.5","v2t":"num"},{"t":"btwn","v":"25.6","vt":"num","v2":"26.5","v2t":"num"},{"t":"btwn","v":"26.6","vt":"num","v2":"27.6","v2t":"num"},{"t":"gt","v":"28","vt":"str"},{"t":"lt","v":"24.4","vt":"str"}],"checkall":"true","repair":false,"outputs":5,"x":480,"y":140,"wires":[["8ee71314.ea581"],["3db59e29.111052"],["a5586ac0.c1b8"],["70a9c077.d7509"],["e789ee54.0fafa"]]},{"id":"70a9c077.d7509","type":"template","z":"c313cdd0.be2ec8","name":"Red","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n    \"on\":true,\n    \"sat\":254,\n    \"bri\":254,\n    \"hue\":65000\n}\n\n","output":"str","x":690,"y":80,"wires":[["619ba4fb.581bac","7317be4b.13a6b"]]},{"id":"a5586ac0.c1b8","type":"template","z":"c313cdd0.be2ec8","name":"Blue","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n    \"on\":true,\n    \"sat\":254,\n    \"bri\":254,\n    \"hue\":40000\n}","output":"str","x":690,"y":200,"wires":[["aa76a652.1389b8","7317be4b.13a6b"]]},{"id":"d2e2e098.4afca","type":"debug","z":"c313cdd0.be2ec8","name":"salida de la nube","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":300,"y":80,"wires":[]},{"id":"7317be4b.13a6b","type":"ibmiot out","z":"c313cdd0.be2ec8","authentication":"apiKey","apiKey":"5c13f417.02dc7c","outputType":"evt","deviceId":"rpi1","deviceType":"raspberry","eventCommandType":"ON","format":"json","data":"data","qos":0,"name":"ON","service":"registered","x":870,"y":140,"wires":[]},{"id":"aa76a652.1389b8","type":"debug","z":"c313cdd0.be2ec8","name":"salida azul","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":890,"y":220,"wires":[]},{"id":"619ba4fb.581bac","type":"debug","z":"c313cdd0.be2ec8","name":"salida rojo","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":920,"y":60,"wires":[]},{"id":"18ec5ad2.bc8a55","type":"comment","z":"c313cdd0.be2ec8","name":"","info":"sudo bluetoothctl\n","x":180,"y":280,"wires":[]},{"id":"8ee71314.ea581","type":"template","z":"c313cdd0.be2ec8","name":"Blue","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n    \"on\":true,\n    \"sat\":150,\n    \"bri\":254,\n    \"hue\":40000\n}","output":"str","x":690,"y":120,"wires":[["7317be4b.13a6b"]]},{"id":"3db59e29.111052","type":"template","z":"c313cdd0.be2ec8","name":"Blue","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n    \"on\":true,\n    \"sat\":200,\n    \"bri\":254,\n    \"hue\":40000\n}","output":"str","x":690,"y":160,"wires":[["7317be4b.13a6b"]]},{"id":"f957e518.d2ec38","type":"inject","z":"c313cdd0.be2ec8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":420,"y":220,"wires":[["a5586ac0.c1b8"]]},{"id":"240cd15a.68440e","type":"inject","z":"c313cdd0.be2ec8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":520,"y":60,"wires":[["8ee71314.ea581"]]},{"id":"d4c998c8.b18ab8","type":"inject","z":"c313cdd0.be2ec8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":540,"y":280,"wires":[["e789ee54.0fafa"]]},{"id":"6675a352.3a246c","type":"template","z":"c313cdd0.be2ec8","name":"Blue","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n    \"on\":true,\n    \"sat\":10,\n    \"bri\":254,\n    \"hue\":40000\n}","output":"str","x":690,"y":340,"wires":[["7317be4b.13a6b"]]},{"id":"e789ee54.0fafa","type":"template","z":"c313cdd0.be2ec8","name":"Blue","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"{\n    \"on\":true,\n    \"sat\":100,\n    \"bri\":254,\n    \"hue\":40000\n}","output":"str","x":690,"y":240,"wires":[["7317be4b.13a6b"]]},{"id":"8ca23a71.d8292","type":"inject","z":"c313cdd0.be2ec8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":400,"y":260,"wires":[["3db59e29.111052"]]},{"id":"a3e1685f.804738","type":"http in","z":"c313cdd0.be2ec8","name":"","url":"/script","method":"get","upload":false,"swaggerDoc":"","x":100,"y":420,"wires":[["d3a1f5b.3b20b08"]]},{"id":"a9344b90.1da08","type":"debug","z":"c313cdd0.be2ec8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":650,"y":420,"wires":[]},{"id":"d3a1f5b.3b20b08","type":"delay","z":"c313cdd0.be2ec8","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":300,"y":420,"wires":[["d8deee92.50368"]]},{"id":"d8deee92.50368","type":"python-function","z":"c313cdd0.be2ec8","name":"Gateway","func":"import pygatt.backends\nimport paho.mqtt.client as mqtt\nimport time\nimport timeit\nimport threading\nimport sys\n\nglobal devices\nglobal continuousRead\nglobal client\ncontinuousRead = []\n# Configuration values needed to connect to IBM IoT Cloud\norgID = \"0r7wqx\" \t\t#For registered connection, replace with your organisation ID.\ndeviceType = \"raspberry\"  #For registered connection, replace with your Device Type.\ndeviceID = \"rpi2\" \t\t\t\t#For registered connection, replace with your Device ID.\nauth_token = \"alejandro1234\" \t\t\t#For registered connection, replace with your Device authentication token.\n\nclass BLEdevice:\n\n    deviceCount = 0\n    busy = False\n    \n    def __init__(self, name, mac, interval, command):\n        self.name = name\n        self.mac = mac\n        self.interval = interval\n        self.command = command\n        self.newCommand = \"\"\n        self.commandToSend = False\n        self.end = False\n        BLEdevice.deviceCount += 1\n\n    def lowerCount(self):\n        BLEdevice.deviceCount -= 1\n\n    def makeBusy(self):\n        BLEdevice.busy = True\n\n    def free(self):\n        BLEdevice.busy = False\n\n    def endThread(self):\n        self.end = True\n\n    def changeCommand(self, newCommand, newInterval):\n        self.command = newCommand\n        self.interval = newInterval\n\nclass myThread(threading.Thread):\n\n    def __init__(self, threadID, device):\n        print(\"Thread initialized!\")\n        threading.Thread.__init__(self)\n        self.threadID = threadID\n        self.device = device\n\n    def run(self):\n        print(\"Thread started!\")\n        loopRead(self.threadID, self.device)\n        print(\"Thread ended!\")\n\n\n#Callback for when the client receives a CONNACK response from the server.\ndef on_connect(client, userdata, flags, rc):\n    print(\"Connected with result code \" + str(rc))\n\n    if(orgID != 'quickstart'):\n        #Subscribing in on_connect() means tha if we lose the connection and reconnect the subscription will be renewed.\n        client.subscribe(\"iot-2/cmd/+/fmt/json\", 0)\n        print(\"subscribed to iot-2/cmd/+/fmt/json\")\n\n#The callback for then a PUBLISH message is received from the server.\ndef on_message(client, userdata, msg):\n    print(\"\\n----------------------------------------------\")\n    print(\"MSG received on TOPIC: \" + msg.topic + \"\\npayload: \" +str(msg.payload) + \"\\n\")\n\n    if(len(msg.payload)>13):\n        nodeID = msg.payload[8:11]\n        command = msg.payload[11:12]\n\n        mac = findAddress(nodeID, adapter)\n        #print(mac)\n        if(mac == 'null'):\n            while True:\n                if(BLEdevice.busy == False):\n                    BLEdevice.busy = True\n                    adapter.start()\n                    global devices\n                    #print(devices)\n                    devices = scanForDevices()\n                    mac = findAddress(nodeID, adapter)\n                    BLEdevice.busy = False\n                    break\n\n        if(mac != 'null'):\n            if  (command == '0'):\n                found = False\n                \n                for item in continuousRead:\n                    if(item.device.name == nodeID):\n                        found = True\n\n                if(found == False):\n                    connection = tryConnect(adapter, mac)\n                    writeCommand(connection, nodeID, msg.payload[8:len(msg.payload)-2])\n                    time.sleep(0.1)\n                    readChar(connection, mac)\n\n            elif(command == '1'):\n                units = msg.payload[12:13]\n                interval = int(msg.payload[13:15])\n                print(units)\n                print(interval)\n                if  (units == '1'):\n                    interval = interval * 3600\n                elif(units == '2'):\n                    interval = interval * 60\n                elif(units == '3'):\n                    interval = interval\n                elif(units == '4'):\n                    interval = interval / 10\n\n                print(interval)\n                found = False\n                \n                global continuousRead\n\n                for item in continuousRead:\n                    if(item.device.name == nodeID):\n                        print(\"Changing command!\")\n                        found = True\n                        item.device.changeCommand(msg.payload[8:len(msg.payload)-2], interval)\n                        item.device.newCommand = msg.payload[8:len(msg.payload)-2]\n                        item.device.commandToSend = True\n\n                if(found == False):\n                    device = BLEdevice(nodeID, mac, interval, msg.payload[8:len(msg.payload)-2])\n                    t = myThread(device.deviceCount, device)\n                    t.start()\n                    continuousRead.append(t)\n                    print(continuousRead)\n                    print(\"Added new device, number of connected devices: \" + t.device.deviceCount)\n                \n                \n            elif(command == '2'):\n                global continuousRead\n                print(continuousRead)\n                for item in continuousRead:\n                    if(item.device.name == nodeID):\n                        item.device.lowerCount()\n                        item.device.changeCommand(command, 10)\n                        item.device.endThread()\n                        continuousRead.remove(item)\n                        print(continuousRead)\n                        break\n\n            elif(command == '3' or command == '4'):\n                found = False\n                \n                for item in continuousRead:\n                    if(item.device.name == nodeID):\n                        print(\"Sending command!\")\n                        found = True\n                        item.device.newCommand = msg.payload[8:len(msg.payload)-2]\n                        item.device.commandToSend = True\n\n                if(found == False):\n                    connection = tryConnect(adapter, mac)\n                    writeCommand(connection, nodeID, msg.payload[8:len(msg.payload)-2])\n\n                \n            #adapter.reset()\n            #adapter.start()\n\ndef writeCommand(firefly, endNode, cmd):\n    cmd = endNode + cmd\n    print(\"Writing command \" + cmd + \"to sensor with ID: \" + endNode)\n    firefly.char_write_handle(24, map(ord, cmd))\n\ndef readChar(firefly,mac):\n    try:\n        received = firefly.char_read_hnd(24)\n        print(received)\n        if(len(received) > 30):\n            publishMQTT(received, client)\n    except pygatt.exceptions.NotificationTimeout:\n        print(\"passed\")\n\ndef loopRead(thread, device):\n    print(\"normal\")\n    error = 0\n    connection = None\n    adapterTmp = pygatt.backends.GATTToolBackend()\n    #adapterTmp.reset()\n    adapterTmp.start()\n    passed = False\n    \n    while True:\n        if(passed == False):\n            time1 = time.clock()\n\n        #   ending thread if we got \"kill continuous response\" command\n        if(device.end == True):\n            device.makeBusy()\n            try:\n                writeCommand(connection, device.name, device.command)\n            except:\n                connection = tryConnect(adapterTmp, device.mac)\n                try:\n                    writeCommand(connection, device.name, device.command)\n                except:\n                    pass\n            device.free()\n            if(connection != None):\n                connection.disconnect()\n            break\n        \n        try:\n            if(error > 2):\n                error = 0\n                connection = None\n\n            if(connection is None and device.busy == False):\n                device.makeBusy()\n                connection = tryConnect(adapterTmp, device.mac)\n                try:\n                    writeCommand(connection, device.name, device.command)\n                except:\n                    pass\n                device.free()\n                time.sleep(0.1)\n            if(connection != None):\n                passed = False\n                received = connection.char_read_hnd(24)\n                print(received)\n                if(len(received) > 30):\n                    publishMQTT(received, client)\n                error = 0\n                if(device.commandToSend == True):\n                    try:\n                        writeCommand(connection, device.name, device.newCommand)\n                    except:\n                        pass\n                    device.commandToSend = False\n        except pygatt.exceptions.NotificationTimeout:\n            error += 1\n            passed = True\n            print(\"passed \")\n            print(thread)\n        \n        if(passed == False):\n            time2 = time.clock()\n            delay1 = device.interval - (time2 - time1)\n\n            print(delay1)\n            if(delay1 < 0):\n                delay1 = 0\n\n            #   this part of the code disconnects from FlyTag module so it's visible by other devices,\n            #   in this case if interval is longer than 10seconds\n            if(device.interval >= 10 and connection != None):\n                connection.disconnect()\n                connection = None\n            time.sleep(delay1)\n            \ndef tryConnect(adapter2, mac):\n\n    error = 0\n    \n    while True:\n        try:\n            print(\"Trying to connect...\")\n            if(error > 3):\n                print(\"Could not reconnect.\")\n                return 'null'\n            else:\n                return(adapter2.connect(mac, 5, 'random'))\n            break\n        except pygatt.exceptions.NotConnectedError:\n            error += 1\n            print(\"Had an Error...\")\n            time.sleep(2)\n            pass\n\ndef scanForDevices():\n    tmp = adapter.scan(3,True)\n    print(\"Filter devices to use only firefly devices\")\n    return([device for device in tmp if str(device[\"name\"]).startswith(\"FF-\")])\n    \ndef findAddress(endNode, adapter1):\n    print(\"Finding address for endNode: \" + endNode)\n    endNode = \"FF-\" + endNode\n    print(\"endNode ID: \" + endNode)\n    print(\"List of all connected devices:\")\n    print(devices)\n    print(\"\\n\")\n    for i in range(len(devices)):\n        if(devices[i]['name'] == endNode):\n            print(\"Found device: \" + devices[i]['address'])\n            return(devices[i]['address'])\n    print(\"Device not present\")\n    return(\"null\")\n\ndef publishMQTT(data, clientMQTT):\n    g2x = (data[4] << 8) | (data[5])\n    g2y = (data[6] << 8) | (data[7])\n    g2z = (data[8] << 8) | (data[9])\n\n    gx = g2x * 0.003125\n    gy = g2y * 0.003125\n    gz = g2z * 0.003125\n\n    ax = (data[10] << 8) | data[11]\n    ay = (data[12] << 8) | data[13] \n    az = (data[14] << 8) | data[15] \n\n    a1x = ax / 16384.0\n    a1y = ay / 16384.0\n    a1z = az / 16384.0\n\n    if (data[10] > 127):\n        a1x = a1x - 4.0\n    if (data[12]> 127):\n        a1y = a1y - 4.0\n    if (data[14]> 127):\n        a1z = a1z - 4.0\n\n    mx = (data[16] << 8) | data[17]\n    my = (data[18] << 8) | data[19] \n    mz = (data[20] << 8) | data[21]\n\n    if (data[16] > 127):\n        mx = mx - 65536\n    if (data[18]> 127):\n        my = my - 65536\n    if (data[20]> 127):\n        mz = mz - 65536\n\n    lux = (data[26] << 8) | data[27]\n\n    t = (data[22] << 8) | data[23]\n    temp = ((175.72 * t) / 65536) - 46.85\n    \n    rh = (data[24] << 8) | data[25]\n    humid = ((125.0 * rh) / 65536) - 6\n\n    analog = data[30]\n\n    print(\"Publishing MQTT msg\")\n    sendData = (\"{\\\"d\\\": {\\\"ID\\\":\\\"FF-%c%c%c\\\",\\\"gX\\\":%.2f,\\\"gY\\\":%.2f,\\\"gZ\\\":%.2f,\\\"aX\\\":%.2f,\\\"aY\\\":%.2f,\\\"aZ\\\":%.2f,\\\"mX\\\":%d,\\\"mY\\\":%d,\\\"mZ\\\":%d,\\\"Lux\\\": %d, \\\"Temp\\\": %.1f,\\\"RelHum\\\" :%.1f, \\\"Analog\\\":%d}}\" % (data[0],data[1], data[2], gx, gy, gz, a1x, a1y, a1z, mx, my, mz, lux, temp, humid, analog))\n    clientMQTT.publish(\"iot-2/evt/testing/fmt/json\", sendData)\n\ntry:\n\n    if(orgID == 'quickstart'):\n        mac = open('/sys/class/net/eth0/address').read()\n        mac = mac.replace(\":\",\"\")\n        mac = mac[0:12]\n        print(mac)\n        client = mqtt.Client(\"d:quickstart:\"+deviceType+\":\"+mac)\n        print(\"d:quickstart:\"+ deviceType +\":\" + mac)\n\n        client.on_connect = on_connect\n        client.on_message = on_message\n        \n        client.connect(\"quickstart.messaging.internetofthings.ibmcloud.com\", 1883, 60)\n    else:\n        client = mqtt.Client(\"d:\"+orgID+ \":\" +deviceType+\":\" + deviceID)\n\n        client.on_connect = on_connect\n        client.on_message = on_message\n        \n        client.connect(orgID+\".messaging.internetofthings.ibmcloud.com\", 1883, 15)\n        client.username_pw_set(\"use-token-auth\", auth_token)\n    \n    \n    print(\"Get adapter obj\")\n    adapter = pygatt.backends.GATTToolBackend()\n    adapter.reset()\n    adapter.start()\n    print(\"Scanning for devices...\")\n    devices = scanForDevices()\n    print(\"List of connected devices: \")\n    print(devices)\n    print(\"\\n\")\n\n    if(orgID == 'quickstart'):\n        connect = 0;\n        for i in range(len(devices)):\n            if(connect<3):\n                try:\n                    if(devices[i]['name'].startswith('FF-')):\n                        print(devices[i]['address'])\n                        print(devices[i]['name'][3:6])\n                        device = BLEdevice(devices[i]['name'][3:6], devices[i]['address'], 5, '0001305')\n                        t = myThread(device.deviceCount, device)\n                        t.start()\n                        continuousRead.append(t)\n                        print(continuousRead)\n                        print(t.device.deviceCount)\n                        connect+=1\n                except Exception as e:\n                    #print e\n                    pass\n\n    while(True):\n        print(\"main\")\n        client.loop_forever()\n\nexcept KeyboardInterrupt:\n    print(\"Exiting program!\")\n    for item in continuousRead:\n        item.device.lowerCount()\n        item.device.changeCommand(\"0002\", 10)\n        item.device.endThread()\n        continuousRead.remove(item)\n        print(continuousRead)\n        \n    sys.exit(1)\n\nreturn msg","outputs":1,"x":480,"y":420,"wires":[["a9344b90.1da08"]]},{"id":"5c13f417.02dc7c","type":"ibmiot","z":"","name":"a-0r7wqx-t5m7mpayu9","keepalive":"60","serverName":"0r7wqx.messaging.internetofthings.ibmcloud.com","cleansession":true,"appId":"","shared":false}]
